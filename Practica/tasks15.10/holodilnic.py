from decimal import Decimal
from datetime import datetime, date
import os

clear = lambda: os.system('cls')
DATE_FORMAT = '%Y-%m-%d'
goods = {
    '–ü–µ–ª—å–º–µ–Ω–∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ': [
        # –ü–µ—Ä–≤–∞—è –ø–∞—Ä—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ '–ü–µ–ª—å–º–µ–Ω–∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ':
        {'amount': Decimal('0.5'), 'expiration_date': date(2023, 7, 15)},
        # –í—Ç–æ—Ä–∞—è –ø–∞—Ä—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ '–ü–µ–ª—å–º–µ–Ω–∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ':
        {'amount': Decimal('2'), 'expiration_date': date(2023, 8, 1)},
    ],
    '–ü–µ–ª—å–º–µ–Ω–∏ –ê—Ä–∏–∞–Ω—Ç': [
        # –ü–µ—Ä–≤–∞—è –ø–∞—Ä—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ '–ü–µ–ª—å–º–µ–Ω–∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ':
        {'amount': Decimal('0.8'), 'expiration_date': date(2025, 10, 13)}
    ],
    '–í–æ–¥–∞': [
        {'amount': Decimal('1.5'), 'expiration_date': None}
    ],
}


def parse_date(date_str: str) -> date:
    try:
        return datetime.strptime(date_str, DATE_FORMAT).date()
    except:
        return None


def add(title: str = '–ê–¥–∂–∏–∫–∞', amount: Decimal = Decimal('1'), expiration_date=None):
    if title in goods:
        goods[title] += [{'amount': amount, 'expiration_date': expiration_date}]
    else:
        goods[title] = [{'amount': amount, 'expiration_date': expiration_date}]


def add_by_note(s: str = '–ê–¥–∂–∏–∫–∞ 1 2025-10-13'):
    s = s.split(' ')
    expiration_date = parse_date(s[-1])

    if expiration_date:
        amount = s[-2]
        title = ' '.join(s[-3::-1])
    else:
        amount = s[-1]
        title = ' '.join(s[-2::-1])

    amount = Decimal(amount)
    add(title=title, amount=amount, expiration_date=expiration_date)
    return title, amount, expiration_date


def find(s: str = '–ü–µ–ª—å–º–µ–Ω–∏') -> dict:
    s = s.lower()
    ans = {}
    for i in goods.keys():
        if i.lower().count(s):
            ans[i] = goods[i]
    return ans


def amount(s: str = '–ü–µ–ª—å–º–µ–Ω–∏') -> Decimal:
    products = find(s)
    count = 0
    for product in products.keys():
        for i in products[product]:
            count += i['amount']

    return count


def put_food_in_refrigerator(error: bool = False):
    clear()
    if error:
        print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.')
    else:
        print('–Ø –≤–∏–∂—É, —Ç—ã –∫—É–ø–∏–ª –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã!')
    print('–ß—Ç–æ –±—É–¥–µ–º –∫–ª–∞—Å—Ç—å? ')
    print('–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {–ù–ê–ó–í–ê–ù–ò–ï} {–ö–û–õ_–í–û} {–ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}')
    s = input()

    try:
        title, amount, expiration_date = add_by_note(s)
    except:
        put_food_in_refrigerator(error=True)
    else:
        print(f'–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª {title} –≤ –∫–æ–ª-–≤–µ {amount} –∫–≥')
        input('–ù–∞–∂–º–∏—Ç–µ enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        menu()


def find_food_in_refrigerator():
    clear()
    print('–î–∞ —Ç—ã –≥–æ–ª–æ–¥–µ–Ω!')
    print('–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏? ')
    print('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
    s = input('–í–≤–æ–¥: ')
    response = find(s)
    total = amount(s)

    if not response:
        print('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª :(')
        input('–ù–∞–∂–º–∏—Ç–µ enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        menu()
    else:
        print('–ù–∞—à–µ–ª!')
        print("-" * 50)

        for product in response.keys():
            print(f'üì¶ {product}:')
            count_of_part = 0
            for part in response[product]:
                count_of_part += 1
                if part['expiration_date']:
                    print(f'‚Ä¢ –ü–∞—Ä—Ç–∏—è {count_of_part}: {part['amount']} –∫–≥, —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {part['expiration_date']}')
                else:  # –ï—Å–ª–∏ –Ω–µ—Ç
                    print(f'‚Ä¢ –ü–∞—Ä—Ç–∏—è {count_of_part}: {part['amount']} –∫–≥')

        print("-" * 50)
        print(f'–í—Å–µ–≥–æ: {total} –∫–≥')
        input('–ù–∞–∂–º–∏—Ç–µ enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        menu()


def menu(error: bool = False):
    while True:
        clear()
        if error:
            print('–ù–µ –ø–æ–Ω—è–ª! –î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        else:
            print('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞.')
            print(f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è {amount('')} –∫–≥ –µ–¥—ã!')
        print('–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:')
        print('1. –ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫')
        print('2. –ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ')
        choice = input('–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É: ')

        if choice == '1':
            put_food_in_refrigerator()
        elif choice == '2':
            find_food_in_refrigerator()
        else:
            menu(error=True)


if __name__ == '__main__':
    menu()
